
import { useState, useEffect } from "react";
import MainLayout from "@/components/layout/MainLayout";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Search, MessageSquare, ThumbsUp, MessageCircle, Share2, Plus, Loader2, ShoppingBag } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useRealtimeSubscription, RealtimeEvent } from "@/services/realtimeService";
import { pb } from "@/integrations/pocketbase/client";
import { useAuth } from "@/contexts/AuthContext";
import { useToast } from "@/components/ui/use-toast";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import RealtimeIndicator from "@/components/realtime/RealtimeIndicator";
import { formatDistanceToNow } from "date-fns";

const CommunityPage = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [newPostContent, setNewPostContent] = useState("");
  const [posts, setPosts] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  const { user } = useAuth();
  const { toast } = useToast();

  // Subscribe to realtime updates for posts
  const { isConnected } = useRealtimeSubscription({
    collection: 'posts',
    callback: (event: RealtimeEvent) => {
      if (event.action === 'create') {
        // Add new post to the list
        setPosts(prevPosts => [event.record, ...prevPosts]);
        toast({
          title: 'New post',
          description: 'Someone just posted in the community',
          duration: 3000
        });
      } else if (event.action === 'update') {
        // Update existing post
        setPosts(prevPosts =>
          prevPosts.map(post =>
            post.id === event.record.id ? event.record : post
          )
        );
      } else if (event.action === 'delete') {
        // Remove deleted post
        setPosts(prevPosts =>
          prevPosts.filter(post => post.id !== event.record.id)
        );
      }
    }
  });

  // Fetch posts on component mount
  useEffect(() => {
    const fetchPosts = async () => {
      try {
        setLoading(true);

        const response = await pb.collection('posts').getList(1, 50, {
          sort: '-created',
          expand: 'author'
        });

        setPosts(response.items);
      } catch (error) {
        console.error('Error fetching posts:', error);
        toast({
          title: 'Error',
          description: 'Failed to load community posts',
          variant: 'destructive'
        });
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, [toast]);

  // Handle tab change
  const handleTabChange = (value: string) => {
    // Filter posts based on tab
    const fetchFilteredPosts = async () => {
      try {
        setLoading(true);

        let filter = '';
        if (value === 'questions') {
          filter = 'postType="question"';
        } else if (value === 'market') {
          filter = 'postType="marketplace"';
        }

        const response = await pb.collection('posts').getList(1, 50, {
          sort: '-created',
          filter,
          expand: 'author'
        });

        setPosts(response.items);
      } catch (error) {
        console.error('Error fetching filtered posts:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchFilteredPosts();
  };

  const { user } = useAuth();
  const { toast } = useToast();

  // Subscribe to realtime updates for posts
  const { isConnected } = useRealtimeSubscription({
    collection: 'posts',
    callback: (event: RealtimeEvent) => {
      if (event.action === 'create') {
        // Add new post to the list
        setPosts(prevPosts => [event.record, ...prevPosts]);
        toast({
          title: 'New post',
          description: 'Someone just posted in the community',
          duration: 3000
        });
      } else if (event.action === 'update') {
        // Update existing post
        setPosts(prevPosts =>
          prevPosts.map(post =>
            post.id === event.record.id ? event.record : post
          )
        );
      } else if (event.action === 'delete') {
        // Remove deleted post
        setPosts(prevPosts =>
          prevPosts.filter(post => post.id !== event.record.id)
        );
      }
    }
  });

  // Fetch posts on component mount
  useEffect(() => {
    const fetchPosts = async () => {
      try {
        setLoading(true);

        let filter = '';
        if (activeTab === 'questions') {
          filter = 'postType="question"';
        } else if (activeTab === 'marketplace') {
          filter = 'postType="marketplace"';
        } else if (activeTab === 'general') {
          filter = 'postType="general"';
        }

        const response = await pb.collection('posts').getList(1, 50, {
          sort: '-created',
          filter,
          expand: 'author'
        });

        setPosts(response.items);
      } catch (error) {
        console.error('Error fetching posts:', error);
        toast({
          title: 'Error',
          description: 'Failed to load community posts',
          variant: 'destructive'
        });
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, [activeTab, toast]);

  // Handle tab change
  const handleTabChange = (value: string) => {
    setActiveTab(value);
  };

  // Handle post submission
  const handlePostSubmit = async () => {
    if (!user) {
      toast({
        title: 'Authentication required',
        description: 'Please log in to post in the community',
        variant: 'destructive'
      });
      return;
    }

    if (!newPostContent.trim()) {
      toast({
        title: 'Empty post',
        description: 'Please enter some content for your post',
        variant: 'destructive'
      });
      return;
    }

    try {
      setSubmitting(true);

      // Determine post type based on content
      let postType = 'general';
      if (newPostContent.includes('?')) {
        postType = 'question';
      } else if (newPostContent.toLowerCase().includes('sell') ||
                newPostContent.toLowerCase().includes('buy') ||
                newPostContent.toLowerCase().includes('price') ||
                newPostContent.toLowerCase().includes('market')) {
        postType = 'marketplace';
      }

      // Create post
      await pb.collection('posts').create({
        author: user.id,
        content: newPostContent,
        postType
      });

      // Clear input
      setNewPostContent('');

      toast({
        title: 'Post created',
        description: 'Your post has been published to the community',
        duration: 3000
      });
    } catch (error) {
      console.error('Error creating post:', error);
      toast({
        title: 'Error',
        description: 'Failed to create post. Please try again.',
        variant: 'destructive'
      });
    } finally {
      setSubmitting(false);
    }
  };

  // Handle like post
  const handleLikePost = async (postId: string) => {
    if (!user) {
      toast({
        title: 'Authentication required',
        description: 'Please log in to like posts',
        variant: 'destructive'
      });
      return;
    }

    try {
      // Check if user already liked the post
      const existingLikes = await pb.collection('likes').getList(1, 1, {
        filter: `post="${postId}" && user="${user.id}"`
      });

      if (existingLikes.items.length > 0) {
        // User already liked the post, remove the like
        await pb.collection('likes').delete(existingLikes.items[0].id);

        toast({
          title: 'Like removed',
          description: 'You have removed your like from this post',
          duration: 2000
        });
      } else {
        // User hasn't liked the post yet, add a like
        await pb.collection('likes').create({
          post: postId,
          user: user.id
        });

        toast({
          title: 'Post liked',
          description: 'You have liked this post',
          duration: 2000
        });
      }
    } catch (error) {
      console.error('Error liking post:', error);
      toast({
        title: 'Error',
        description: 'Failed to like post. Please try again.',
        variant: 'destructive'
      });
    }
  };

  // Filter posts based on search query
  const filteredPosts = posts.filter(post => {
    const content = post.content?.toLowerCase() || '';
    const authorName = post.expand?.author?.name?.toLowerCase() || '';
    const authorLocation = post.expand?.author?.location?.toLowerCase() || '';
    const query = searchQuery.toLowerCase();

    return content.includes(query) || authorName.includes(query) || authorLocation.includes(query);
  });

  const handlePostSubmit = async () => {
    if (!user) {
      toast({
        title: 'Authentication required',
        description: 'Please log in to post in the community',
        variant: 'destructive'
      });
      return;
    }

    if (!newPostContent.trim()) {
      toast({
        title: 'Empty post',
        description: 'Please enter some content for your post',
        variant: 'destructive'
      });
      return;
    }

    try {
      setSubmitting(true);

      // Determine post type based on content
      let postType = 'general';
      if (newPostContent.includes('?')) {
        postType = 'question';
      } else if (newPostContent.toLowerCase().includes('sell') ||
                newPostContent.toLowerCase().includes('buy') ||
                newPostContent.toLowerCase().includes('price') ||
                newPostContent.toLowerCase().includes('market')) {
        postType = 'marketplace';
      }

      // Create post
      await pb.collection('posts').create({
        author: user.id,
        content: newPostContent,
        postType
      });

      // Clear input
      setNewPostContent('');

      toast({
        title: 'Post created',
        description: 'Your post has been published to the community',
        duration: 3000
      });
    } catch (error) {
      console.error('Error creating post:', error);
      toast({
        title: 'Error',
        description: 'Failed to create post. Please try again.',
        variant: 'destructive'
      });
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <MainLayout>
      <div className="fataplus-container py-6">
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-2xl font-bold">Community</h1>
          <RealtimeIndicator className="w-auto" />
        </div>

        {/* Search input */}
        <div className="relative mb-6">
          <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search posts..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>

        {/* New post form */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <Textarea
              placeholder="Share something with the community..."
              value={newPostContent}
              onChange={(e) => setNewPostContent(e.target.value)}
              className="mb-3 min-h-24"
            />
            <div className="flex justify-between">
              <Button variant="outline" size="sm">Add Photo</Button>
              <Button
                size="sm"
                onClick={handlePostSubmit}
                disabled={!newPostContent.trim()}
              >
                Post
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Posts tabs */}
        <Tabs defaultValue="all" className="mb-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="all">All Posts</TabsTrigger>
            <TabsTrigger value="questions">Questions</TabsTrigger>
            <TabsTrigger value="market">Marketplace</TabsTrigger>
          </TabsList>

          <TabsContent value="all">
            {filteredPosts.length > 0 ? (
              <div className="space-y-4">
                {filteredPosts.map(post => (
                  <Card key={post.id}>
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3 mb-3">
                        <div className="bg-muted h-10 w-10 rounded-full flex-shrink-0"></div>
                        <div>
                          <p className="font-medium">{post.author}</p>
                          <div className="flex items-center gap-2 text-xs text-muted-foreground">
                            <span>{post.authorLocation}</span>
                            <span>•</span>
                            <span>{post.timeAgo}</span>
                          </div>
                        </div>
                      </div>
                      <p className="mb-3">{post.content}</p>
                      {post.image && (
                        <div className="mb-3 bg-muted rounded-md h-40 w-full flex items-center justify-center">
                          <img src={post.image} alt="Post content" className="h-full w-full object-cover rounded-md" />
                        </div>
                      )}
                      <div className="flex justify-between text-sm text-muted-foreground">
                        <button className="flex items-center gap-1">
                          <ThumbsUp className="h-4 w-4" />
                          <span>{post.likes}</span>
                        </button>
                        <button className="flex items-center gap-1">
                          <MessageCircle className="h-4 w-4" />
                          <span>{post.comments} comments</span>
                        </button>
                        <button className="flex items-center gap-1">
                          <Share2 className="h-4 w-4" />
                          <span>Share</span>
                        </button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <Card>
                <CardContent className="p-8 text-center">
                  <Search className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                  <p className="font-medium">No posts found</p>
                  <p className="text-sm text-muted-foreground">Try a different search term</p>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="questions">
            <Card>
              <CardContent className="p-8 text-center">
                <MessageSquare className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                <p className="font-medium">Community Questions</p>
                <p className="text-sm text-muted-foreground mb-4">Ask and answer farming questions</p>
                <Button>Ask a Question</Button>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="market">
            <Card>
              <CardContent className="p-8 text-center">
                <MessageSquare className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                <p className="font-medium">Community Marketplace</p>
                <p className="text-sm text-muted-foreground mb-4">Buy and sell directly with other farmers</p>
                <Button>Create Listing</Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* AI Assistant */}
        <Card className="bg-primary/5 border-primary/20">
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="bg-primary/10 p-2 rounded-full">
                <MessageSquare className="h-5 w-5 text-primary" />
              </div>
              <div className="flex-1">
                <p className="font-medium">Fata AI Helper</p>
                <p className="text-sm text-muted-foreground">Get farming advice and answers</p>
              </div>
              <Button size="sm">Ask</Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
};

export default CommunityPage;
